name: Go CI

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: go
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Install golangci-lint
        run: |
          # Install golangci-lint into GOPATH/bin for the runner
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: |
          # Use the job's working-directory (defaults.run.working-directory is set to go)
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m ./...
      - name: Run go vet
        run: go vet ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: go
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Cache Go build and modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          # Hash the module file inside the go/ subfolder where the module lives
          key: ${{ runner.os }}-go-${{ hashFiles('go/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests and produce coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: test_db
          DB_SSL_MODE: disable
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          # Integration test server startup
          START_TEST_SERVER: 'true'
          BASE_DOMAIN: localhost
          BASE_URL: http://localhost:8080
          # SendGrid key not used for real sends in CI; provide dummy non-empty value
          SENDGRID_API_KEY: test-sendgrid-key
        run: |
          mkdir -p coverage
          go test -v -race -covermode=atomic -coverprofile=coverage/cover.out ./...

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: go/coverage/cover.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: go/coverage/cover.out

      - name: Show coverage summary
        run: |
          go tool cover -func=coverage/cover.out | sed -n '1,200p'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: go
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build
        run: go build -v ./cmd/server

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: avatarctic/clean-architecture-saas
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
  integration:
    name: Integration Tests (docker-compose)
    runs-on: ubuntu-latest
    needs: [test]
    defaults:
      run:
        working-directory: go
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start docker-compose
        run: |
          # Use the compose file in the go/ directory (working-directory is set to go)
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for app health
        run: |
          echo "Waiting for app at http://localhost:8080/health..."
          for i in $(seq 1 60); do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health || true)
            if [ "$status" = "200" ]; then
              echo "app healthy"
              exit 0
            fi
            sleep 1
          done
          echo "App did not become healthy in time"
          docker compose -f docker-compose.yml logs --no-color app || true
          docker compose -f docker-compose.yml ps
          exit 1

      - name: Run integration tests
        env:
          TEST_SERVER_URL: http://localhost:8080
          SENDGRID_API_KEY: test-sendgrid-key
        run: |
          go test -v ./test/integration

      - name: Tear down docker-compose
        if: always()
        run: |
          docker compose -f docker-compose.yml down -v
